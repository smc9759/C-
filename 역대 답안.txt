#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
@@@ %d출력에 따옴표가 필요없다
- '1' 쓰면 Ascii 49로, 1이 아닌 다른 수가 나온다
int main()
{
    printf("%d", input != 'k' ? '1' :'2');
    return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
@@@"참"을 %c로 표시할 수 없다
int main()
{
    char input;
    scanf("%c", &input);
    
    printf("%c", input != 'k' ? "참" :"거짓");
    printf("%c", input > 'h' ? "참" :"거짓");
    printf("%c", input <= 'o' ? "참" :"거짓");
    
    return 0;
}
num1 != 7 ? '1' : '2'
num1 == 7 ? "2" : "1"
num1 == 7 ? 2 : 1

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
@@@AND 연산인데 &하나만 써서 틀림
NOT 연산인데 ~써서 틀림
int main()
{
    int input1, input2;
    scanf("%d %d", &input1, &input2);
    
    printf("%s\n", input1 && input2 ? "참" :"거짓"); 
    printf("%s\n", input1 || input2 ? "참" :"거짓");
    printf("%s\n", !input1 ? "참" :"거짓");
    
    return 0;
}


@@ 비트연산시 unsigned int 선언하는거 까먹지 않기!
- unsign 출력은 %u를 써야됨 
- %d사용해서 틀림 
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main()
{
    unsigned int num1,num2;
    scanf("%d %d", &num1, num2);
    printf("%d", num1^num2);
    printf("%d", num1|num2);
    printf("%d", num1&num2);
    printf("%d", ~num1);
    
    return 0;
}
@@ flag의 첫번째 비트는 128  (1000 0000) 오른쪽에서 8번째 
- 비트 끄는건 &= ~num
flag |= num1<<3;
flag &= ~num2>>2;
flag ^= 128;

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main()
{
    int input;
    scanf("%d", &input);
    
    do
    {
        input -= 1200;
        printf("%d\n",input);
    }
    while(input >= 1200);
    
    return 0;
}

if (i<= num2) break;
if ( i% 7==0) continue;
@@@continue 활용
@@i>=num2 종료하면 끝 수가 누락되므로
@i>num2
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main()
{
    int num1;
    int num2;
    int i;

    scanf("%d %d", &num1, &num2);

    i = num1;

    while (1)
    {
        if (i > num2) break;
        if (i % 10 == 7)
        {
            i++; 
            continue;
        }

        printf("%d ", i);
        i++;
    }

    return 0;
}
@@@감소하는 for문 k = row - i; k > 0; k-- 공백 개수 : row -i -1
@@별은 따로 작성 j = 1; j <= 2*i-1; j++
@

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void) {

    int height;
    scanf("%d", &height);

    int row, col;

    row = height;

    for (int i = 1; i <= row; i++)
    {
        for (int k = row - i; k > 0; k--)
        {
            printf(" ");
        }
        for (int j = 1; j <= 2*i-1; j++)//(2 * row) - 1
        {
            printf("*");
        }
        printf("\n");
    }
    //2*i-1

    return 0;
}
@@@포인터 초기화를 멀록으로 안해줘서 틀림 
    int num1;
    int num2;

    int* numPtr1 =malloc(sizeof(int));
    int* numPtr2= malloc(sizeof(int));

    scanf("%d %d", &num1, &num2);

    *numPtr1 = num1;
    *numPtr2 = num2;

    printf("%d\n", *numPtr1 + *numPtr2);

    free(numPtr1);
    free(numPtr2);

    return 0;
}

--구조체 --

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Person {
    char name[20];
    int age;
    char address[100];
};

int main()
{
    struct Person *p[3000];
@@3000의 개수를 구하려면 포인터 3천개를 가진 p를 person*로 나눠야된다
    for (int i = 0; i < sizeof(p) / sizeof(struct Person*); i++)
    {
        p[i] = malloc(sizeof(struct Person));
        memset(p[i], 0, sizeof(struct Person));
    }
@@@여기서 p->화살표를 썼으니까 구조체 포인터* 배열이다
    printf("%d\n", p[2000]->age);

    for (int i = 0; i < sizeof(p) / sizeof(struct Person*); i++)
    {
        free(p[i]);
    }

    return 0;
}
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>

struct Point2D {
    int x;
    int y;
};

int main()
{
    struct Point2D p[4];
    double length = 0.0f;

    scanf("%d %d %d %d %d %d %d %d",
        &p[0].x, &p[0].y, &p[1].x, &p[1].y, &p[2].x, &p[2].y, &p[3].x, &p[3].y
    );
@@@점1,2,3,4가 일직선으로 연결된게 아님
    int a = 0, b = 0;
    length = sqrt(a * a + b * b);
    for (int i = 0; i < sizeof(p) / sizeof(struct Point2D*) - 1; i++)
    {
        a = (p[i].x - p[i + 1].x);
        b = (p[i].y - p[i + 1].y);
        length += sqrt(a * a + b * b);
    }

    printf("%f\n", length);

    return 0;
}

@@size_t은 부호 없는 정수 자료형인데 sizeof 연산자나 offsetof 매크로의 결과가 size_t입니다.
struct offset{
    int a;
    int b;
    char c;
    double d;
    int e;
};

int main(void)
{
    printf("a : %d\n", offsetof(struct offset, a));
    printf("b : %d\n", offsetof(struct offset, b));
    printf("c : %d\n", offsetof(struct offset, c));
    printf("d : %d\n", offsetof(struct offset, d));
    printf("e : %d\n", offsetof(struct offset, e));

    return 0;
}
a : 0
b : 4
c : 8
d : 12
e : 20
@@@해당 구조체에서 변수가 차지하는 메모리 주소값이다



#include <stdio.h>
@@@union 에 이름을 적용할 필요가 없다. 접근하기 편하라고 일부러 안쓰는것이다.
struct DeviceOption {
    union {
        struct {
            char boot[4];
            char interrupt[2];
            char bus[2];
        };
        unsigned long long option;
    };
};

int main()
{
    struct DeviceOption opt;

    opt.boot[0] = 0x01;
    opt.boot[1] = 0x02;
    opt.boot[2] = 0x03;
    opt.boot[3] = 0x04;
    opt.interrupt[0] = 0x05;
    opt.interrupt[1] = 0x06;
    opt.bus[0] = 0x07;
    opt.bus[1] = 0x11;

    printf("0x%llx\n", opt.option);

    return 0;
}
@@@ 구조체 포인터 안에 구조체 포인터가 있으면 할당을 두번 해주면 된다
    struct Champion* swain= malloc(sizeof(struct Champion));
    swain->stats = malloc(sizeof(struct Stats));
    strcpy(swain->name, "Swain");
    swain->stats->health = 463.0f;
#include <stdio.h>

// INTERFACE_TYPE은 Windows 커널의 winddk.h 헤더 파일에 정의된 열거형
typedef enum _INTERFACE_TYPE {
    InterfaceTypeUndefined = -1,
    Internal,
    Isa,
    Eisa,
    MicroChannel,
    TurboChannel,
    PCIBus,
    VMEBus,
    NuBus,
    PCMCIABus,
    CBus,
    MPIBus,
    MPSABus,
    ProcessorInternal,
    InternalPowerBus,
    PNPISABus,
    PNPBus,
    MaximumInterfaceType
} INTERFACE_TYPE, * PINTERFACE_TYPE;

int main()
{
    //enum INTERFACE_TYPE type;
    //type = Internal;
@@@열거형 = 자료형이라 for문 초기값으로 i를 선언할 때 열거형 이름을 써주면 된다
@@  int i 해도 되네
    for(INTERFACE_TYPE i = Internal; i< MaximumInterfaceType;i++)
    {
        printf("%d ", i);
    }

    return 0;
}

#include <stdio.h>

#define DEBUG    // DEBUG 매크로 정의

int main()
{
#ifdef DEBUG     // DEBUG 매크로가 정의되어 있다면 #ifdef, #endif 사이의 코드를 컴파일
    printf("Debug: %s %s %s %d\n", __DATE__, __TIME__, __FILE__, __LINE__);
#endif

    return 0;
}


#ifndef STRUC
#define STRUC

#endif

#include "calcdata.h"

void print(CALC_DATA *data);

#include "append.h"
#include "print.h"

d이하 코드 
1****
12***
123**
1234*
12345


for (int i = 0; i < 7; i++)
	{
		for (int j = 1; j <= i+1; j++)
		{
			printf("%d", j);
		}
		for (int k = i; k <= 5; k++)
		{
			printf("*");
		}
		printf("\n");
	}

@@@
....A....
...B.B...
..C...C..
.D.....D.
E.......E
.D.....D.
..C...C..
...B.B...
....A.... 
JEEEESUS

#include <stdio.h>
#define MAX 5
#define MAX_D 9
int main() {
	char Alp = 'A';

	for (int i = 0; i < MAX_D; i++)
	{
		for (int k = 0; k < MAX_D; k++)
		{
			if (k == MAX_D / 2 - i || k == MAX_D / 2 + i)
			{
				printf("%c", Alp + i);
			}
			else if (k == i - MAX_D / 2 || k == 12 - i)
			{
				printf("%c", Alp + 8 - i);
			}
			else printf(".");
		}
		printf("\n");
	}
	return 0;
}

#include <stdio.h>
#define MAX 9
#define MAX_D 9
#define MIDDLE 5
int main() {
	char Alp = 'A';
	int step = 0;
	for (int i = 0; i < MAX; i++)
	{
		for (int j = 1; j <= MAX_D; j++)
		{
			if (j == MIDDLE - step || j == MIDDLE + step) putchar('A' + step);
			else putchar('.');
		}
		if (i >= 4) step--;
		else step++;
		putchar('\n');
	}




	for (int i = 0; i < MAX_D; i++)
	{
		for (int k = 0; k < MAX_D; k++)
		{
			if (k == MAX_D / 2 - i || k == MAX_D / 2 + i)
			{
				printf("%c", Alp + i);
			}
			else if (k == i - MAX_D / 2 || k == 12 - i)
			{
				printf("%c", Alp + 8 - i);
			}
			else printf(".");
		}
		printf("\n");
	}
	return 0;
}

#include <stdio.h>
#define MAX 9
#define MAX_D 9
#define MIDDLE 5
int main() {
	char Alp = 'A';
	int step = 0;
	for (int i = 0; i < MAX; i++)
	{
		for (int j = 1; j <= MAX_D; j++)
		{
			if (j == MIDDLE - step || j == MIDDLE + step) putchar('A' + step);
			else putchar('.');
		}
		if (i >= 4) step--;
		else step++;
		putchar('\n');
	}




	for (int i = 0; i < MAX_D; i++)
	{
		for (int k = 0; k < MAX_D; k++)
		{
			if (k == MAX_D / 2 - i || k == MAX_D / 2 + i)
			{
				printf("%c", Alp + i);
			}
			else if (k == i - MAX_D / 2 || k == 12 - i)
			{
				printf("%c", Alp + 8 - i);
			}
			else printf(".");
		}
		printf("\n");
	}
	return 0;
}